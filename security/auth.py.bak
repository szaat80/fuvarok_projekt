# -*- coding: utf-8 -*-
from PySide6.QtCore import Qt
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QFormLayout, 
                             QLineEdit, QPushButton, QMessageBox)
import bcrypt
import jwt
from datetime import datetime, timedelta
from database_handler import DatabaseHandler

class AuthManager:
    def __init__(self):
        self.db = DatabaseHandler()
        self._setup_auth_table()
        self.create_admin_if_not_exists()
        self.SECRET_KEY = "your-secret-key-here"
        
    def _setup_auth_table(self):
        query = """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            role TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP
        )"""
        self.db.execute_query(query)

    def register_user(self, username: str, password: str, role: str = 'user') -> bool:
        try:
            password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
            data = {
                'username': username,
                'password_hash': password_hash.decode('utf-8'),
                'role': role
            }
            self.db.insert_record('users', data)
            return True
        except Exception as e:
            print(f"Regisztrációs hiba: {str(e)}")
            return False

    def authenticate(self, username: str, password: str) -> tuple[bool, str]:
        try:
            result = self.db.execute_query(
                "SELECT id, password_hash, role FROM users WHERE username = ?", 
                (username,)
            )
            
            if not result:
                return False, ""
                
            user = result[0]
            if bcrypt.checkpw(password.encode('utf-8'), user['password_hash'].encode('utf-8')):
                token = self._generate_token(user['id'], user['role'])
                self._update_last_login(user['id'])
                return True, token
            return False, ""
            
        except Exception as e:
            print(f"Bejelentkezési hiba: {str(e)}")
            return False, ""

    def _generate_token(self, user_id: int, role: str) -> str:
        payload = {
            'user_id': user_id,
            'role': role,
            'exp': datetime.utcnow() + timedelta(days=1)
        }
        return jwt.encode(payload, self.SECRET_KEY, algorithm='HS256')

    def _update_last_login(self, user_id: int):
        self.db.execute_query(
            "UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?",
            (user_id,)
        )

    def create_admin_if_not_exists(self):
        query = "SELECT * FROM users WHERE username = 'admin'"
        result = self.db.execute_query(query)
    
        if not result:
            self.register_user('admin', 'admin123', 'admin')

class LoginDialog(QDialog):
    def __init__(self, auth_manager: AuthManager, parent=None):
        super().__init__(parent)
        self.auth_manager = auth_manager
        self.token = None
        self.initUI()
        self.setStyleSheet("""
            QDialog {
                background-color: #2d2d2d;
            }
            QLabel {
                color: white;
            }
            QLineEdit {
                padding: 5px;
                border: 1px solid #666;
                border-radius: 3px;
                background: #444;
                color: white;
            }
            QPushButton {
                background-color: #0d6efd;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
        """)

    def initUI(self):
        self.setWindowTitle("Bejelentkezés")
        layout = QVBoxLayout()
        layout.setSpacing(10)  # Térköz növelése
        layout.setContentsMargins(20, 20, 20, 20)  # Margók növelése

        form_layout = QFormLayout()
        form_layout.setSpacing(10)

        self.username = QLineEdit()
        self.password = QLineEdit()
        self.password.setEchoMode(QLineEdit.Password)

        # Mezők minimális szélessége
        self.username.setMinimumWidth(200)
        self.password.setMinimumWidth(200)

        form_layout.addRow("Felhasználónév:", self.username)
        form_layout.addRow("Jelszó:", self.password)
        layout.addLayout(form_layout)

        login_btn = QPushButton("Bejelentkezés")
        login_btn.setMinimumWidth(100)
        login_btn.clicked.connect(self.handle_login)
        layout.addWidget(login_btn, alignment=Qt.AlignCenter)

        self.setLayout(layout)

    def handle_login(self):
        username = self.username.text()
        password = self.password.text()

        if not username or not password:
            QMessageBox.warning(self, "Hiba", "Minden mező kitöltése kötelező!")
            return

        success, token = self.auth_manager.authenticate(username, password)
        if success:
            self.token = token
            self.accept()
        else:
            QMessageBox.warning(self, "Hiba", "Hibás felhasználónév vagy jelszó!")